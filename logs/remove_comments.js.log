<module>
    <expression_statement>
        <assignment>
            <identifier text="a" />
            <= text="=" />
            <integer text="10" />
        </assignment>
    </expression_statement>
    <expression_statement>
        <assignment>
            <identifier text="b" />
            <= text="=" />
            <integer text="99" />
        </assignment>
    </expression_statement>
    <expression_statement>
        <assignment>
            <identifier text="c" />
            <= text="=" />
            <integer text="100" />
        </assignment>
    </expression_statement>
    <expression_statement>
        <assignment>
            <identifier text="d" />
            <= text="=" />
            <integer text="33" />
        </assignment>
    </expression_statement>
    <function_definition>
        <def text="def" />
        <identifier text="some_function" />
        <parameters>
            <( text="(" />
            <list_splat_pattern>
                <* text="*" />
                <identifier text="args" />
            </list_splat_pattern>
            <) text=")" />
        </parameters>
        <: text=":" />
        <block>
            <expression_statement>
                <string>
                    <" text="\"\"\"" />
                    <string_content text="\n        heredoc\n    " />
                    <" text="\"\"\"" />
                </string>
            </expression_statement>
            <global_statement>
                <global text="global" />
                <identifier text="a" />
            </global_statement>
            <expression_statement>
                <assignment>
                    <identifier text="b" />
                    <= text="=" />
                    <integer text="0" />
                </assignment>
            </expression_statement>
            <comment text="# not the same as the outer b" />
            <for_statement>
                <for text="for" />
                <identifier text="each" />
                <in text="in" />
                <call>
                    <identifier text="range" />
                    <argument_list>
                        <( text="(" />
                        <identifier text="c" />
                        <) text=")" />
                    </argument_list>
                </call>
                <: text=":" />
                <block>
                    <expression_statement>
                        <augmented_assignment>
                            <identifier text="b" />
                            <+= text="+=" />
                            <integer text="1" />
                        </augmented_assignment>
                    </expression_statement>
                </block>
            </for_statement>
            <expression_statement>
                <string>
                    <" text="\"\"\"" />
                    <string_content text="\n        random string\n    " />
                    <" text="\"\"\"" />
                </string>
            </expression_statement>
            <expression_statement>
                <augmented_assignment>
                    <identifier text="a" />
                    <+= text="+=" />
                    <integer text="1" />
                </augmented_assignment>
            </expression_statement>
            <comment text="# is the same as the outer a" />
            <function_definition>
                <def text="def" />
                <identifier text="inner" />
                <parameters>
                    <( text="(" />
                    <) text=")" />
                </parameters>
                <: text=":" />
                <block>
                    <nonlocal_statement>
                        <nonlocal text="nonlocal" />
                        <identifier text="d" />
                    </nonlocal_statement>
                    <expression_statement>
                        <augmented_assignment>
                            <identifier text="d" />
                            <+= text="+=" />
                            <integer text="1" />
                        </augmented_assignment>
                    </expression_statement>
                    <comment text="# is the some_function d not the global d" />
                    <expression_statement>
                        <assignment>
                            <identifier text="c" />
                            <= text="=" />
                            <integer text="10" />
                        </assignment>
                    </expression_statement>
                    <expression_statement>
                        <call>
                            <identifier text="print" />
                            <argument_list>
                                <( text="(" />
                                <identifier text="c" />
                                <) text=")" />
                            </argument_list>
                        </call>
                    </expression_statement>
                    <comment text="# local c" />
                    <return_statement>
                        <return text="return" />
                        <identifier text="b" />
                    </return_statement>
                </block>
            </function_definition>
            <comment text="# is the some_function b not the global b" />
            <expression_statement>
                <call>
                    <identifier text="inner" />
                    <argument_list>
                        <( text="(" />
                        <) text=")" />
                    </argument_list>
                </call>
            </expression_statement>
            <return_statement>
                <return text="return" />
                <identifier text="d" />
            </return_statement>
        </block>
    </function_definition>
</module>

a = 10
b = 99
c = 100
d = 33

def some_function(*args):
    
    global a
    b = 0 
    for each in range(c):
        b += 1
    
    
    a += 1 
    
    def inner():
        nonlocal d
        
        d += 1 
        c = 10
        print(c) 
        return b 
    
    inner()
    return d

